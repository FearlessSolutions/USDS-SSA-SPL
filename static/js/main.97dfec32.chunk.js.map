{"version":3,"sources":["logo.svg","components/Header.js","components/FormFields/NameComponent.js","components/FormFields/AddressComponent.js","components/FormFields/DOBComponent.js","components/FormFields/ContactComponent.js","components/FormFields/FinishComponent.js","components/LibraryCardApplication.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","Fragment","className","href","target","NameComponent","props","useState","firstName","setFirstName","middleName","setMiddleName","lastName","setLastName","htmlFor","onChange","e","value","id","name","type","required","aria-required","onClick","updateName","AddressComponent","address","address1","setAddress1","address2","setAddress2","city","setCity","zip","setZip","usState","setUSState","showNext","updateAddress","pattern","back","next","DOBComponent","birthDate","day","setDay","month","setMonth","year","setYear","updateBirthDate","aria-describedby","ContactComponent","phoneNumber","setPhoneNumber","email","setEmail","emailLang","setEmailLang","contactMethod","setContactMethod","subscribe","setSubscribe","langs","length","indexOf","updateContact","console","log","checked","Object","keys","map","lang","key","FinishComponent","LibraryCardApplication","bind","state","currentTarget","payload","this","setState","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iKAAAA,EAAOC,QAAU,IAA0B,kC,8HCkB5BC,MAhBf,WAEI,OACI,kBAAC,IAAMC,SAAP,KACI,yBAAKC,UAAU,cAAf,4BAGA,wNAG2C,uBAAGC,KAAM,0CAA2CC,OAAQ,UAA5D,oBAH3C,O,iDC8CGC,MArDf,SAAwBC,GAAO,IAAD,EAEQC,mBAASD,EAAME,WAFvB,mBAEnBA,EAFmB,KAERC,EAFQ,OAGUF,mBAASD,EAAMI,YAHzB,mBAGnBA,EAHmB,KAGPC,EAHO,OAIMJ,mBAASD,EAAMM,UAJrB,mBAInBA,EAJmB,KAITC,EAJS,KAc1B,OACI,kBAAC,IAAMZ,SAAP,KACI,8BAAUC,UAAU,gBAChB,4BAAQA,UAAU,cAAlB,QAEA,2BAAOA,UAAU,YAAYY,QAAQ,cAArC,cACA,2BAAOC,SAAU,SAAAC,GAAC,OAAIP,EAAaO,EAAEZ,OAAOa,QACrCA,MAAOT,EACPN,UAAU,YACVgB,GAAG,aACHC,KAAK,aACLC,KAAK,OACLC,UAAQ,EAACC,gBAAc,SAG9B,2BAAOpB,UAAU,YAAYY,QAAQ,eAArC,cAEI,0BAAMZ,UAAU,YAAhB,eAEJ,2BAAOa,SAAU,SAAAC,GAAC,OAAIL,EAAcK,EAAEZ,OAAOa,QACtCA,MAAOP,EACPR,UAAU,YAAYgB,GAAG,cAAcC,KAAK,cAAcC,KAAK,SAEtE,2BAAOlB,UAAU,YAAYY,QAAQ,aAArC,aACA,2BAAOC,SAAU,SAAAC,GAAC,OAAIH,EAAYG,EAAEZ,OAAOa,QACpCA,MAAOL,EACPV,UAAU,YAAYgB,GAAG,YAAYC,KAAK,YAAYC,KAAK,OAAOC,UAAQ,EAC1EC,gBAAc,UAGrBd,GAAaI,GACb,4BAAQQ,KAAM,SAAUG,QAAS,WAtCzCjB,EAAMkB,WAAW,CACbhB,UAAUA,EACVE,WAAWA,EACXE,SAASA,MAmCL,UCqFDa,MAlIf,SAA0BnB,GACtB,IAAIoB,EAAUpB,EAAMoB,QADQ,EAEInB,mBAASmB,EAAQC,UAFrB,mBAErBA,EAFqB,KAEXC,EAFW,OAGIrB,mBAASmB,EAAQG,UAHrB,mBAGrBA,EAHqB,KAGXC,EAHW,OAIJvB,mBAASmB,EAAQK,MAJb,mBAIrBA,EAJqB,KAIfC,EAJe,OAKNzB,mBAASmB,EAAQO,KALX,mBAKrBA,EALqB,KAKhBC,EALgB,OAME3B,mBAASmB,EAAQS,SANnB,mBAMrBA,EANqB,KAMZC,EANY,KAQtBC,EAAWV,GAAYI,GAAQE,GAAOE,EAE5C,SAASG,EAAclC,GACnBE,EAAMgC,cAAc,CAChBX,SAASA,EACTE,SAASA,EACTE,KAAKA,EACLE,IAAIA,EACJE,QAAQA,GACT/B,GAGP,OACI,8BAAUF,UAAU,gBAChB,4BAAQA,UAAU,cAAlB,mBACA,2BAAOA,UAAU,YAAYY,QAAQ,qBAArC,oBACA,2BACIC,SAAU,SAAAC,GAAC,OAAIY,EAAYZ,EAAEZ,OAAOa,QACpCA,MAAOU,EACPzB,UAAU,YAAYgB,GAAG,oBAAoBC,KAAK,oBAAoBC,KAAK,SAE/E,2BAAOlB,UAAU,YAAYY,QAAQ,qBAArC,oBAA0E,0BACtEZ,UAAU,YAD4D,eAE1E,2BACIa,SAAU,SAAAC,GAAC,OAAIc,EAAYd,EAAEZ,OAAOa,QACpCA,MAAOY,EACP3B,UAAU,YAAYgB,GAAG,oBAAoBC,KAAK,oBAAoBC,KAAK,SAE/E,yBAAKlB,UAAU,qBACX,yBAAKA,UAAU,wBACX,2BAAOA,UAAU,YAAYY,QAAQ,QAArC,QACA,2BACIC,SAAU,SAAAC,GAAC,OAAIgB,EAAQhB,EAAEZ,OAAOa,QAChCA,MAAOc,EACP7B,UAAU,YAAYgB,GAAG,OAAOC,KAAK,OAAOC,KAAK,UAEzD,yBAAKlB,UAAU,wBACX,2BAAOA,UAAU,YAAYY,QAAQ,SAArC,SACA,4BACIC,SAAU,SAAAC,GAAC,OAAIoB,EAAWpB,EAAEZ,OAAOa,QACnCA,MAAOkB,EACPjC,UAAU,aAAagB,GAAG,QAAQC,KAAK,SACvC,4BAAQF,OAAK,GAAb,cACA,4BAAQA,MAAM,MAAd,WACA,4BAAQA,MAAM,MAAd,UACA,4BAAQA,MAAM,MAAd,WACA,4BAAQA,MAAM,MAAd,YACA,4BAAQA,MAAM,MAAd,cACA,4BAAQA,MAAM,MAAd,YACA,4BAAQA,MAAM,MAAd,eACA,4BAAQA,MAAM,MAAd,YACA,4BAAQA,MAAM,MAAd,wBACA,4BAAQA,MAAM,MAAd,WACA,4BAAQA,MAAM,MAAd,WACA,4BAAQA,MAAM,MAAd,UACA,4BAAQA,MAAM,MAAd,SACA,4BAAQA,MAAM,MAAd,YACA,4BAAQA,MAAM,MAAd,WACA,4BAAQA,MAAM,MAAd,QACA,4BAAQA,MAAM,MAAd,UACA,4BAAQA,MAAM,MAAd,YACA,4BAAQA,MAAM,MAAd,aACA,4BAAQA,MAAM,MAAd,SACA,4BAAQA,MAAM,MAAd,YACA,4BAAQA,MAAM,MAAd,iBACA,4BAAQA,MAAM,MAAd,YACA,4BAAQA,MAAM,MAAd,aACA,4BAAQA,MAAM,MAAd,eACA,4BAAQA,MAAM,MAAd,YACA,4BAAQA,MAAM,MAAd,WACA,4BAAQA,MAAM,MAAd,YACA,4BAAQA,MAAM,MAAd,UACA,4BAAQA,MAAM,MAAd,iBACA,4BAAQA,MAAM,MAAd,cACA,4BAAQA,MAAM,MAAd,cACA,4BAAQA,MAAM,MAAd,YACA,4BAAQA,MAAM,MAAd,kBACA,4BAAQA,MAAM,MAAd,gBACA,4BAAQA,MAAM,MAAd,QACA,4BAAQA,MAAM,MAAd,YACA,4BAAQA,MAAM,MAAd,UACA,4BAAQA,MAAM,MAAd,gBACA,4BAAQA,MAAM,MAAd,gBACA,4BAAQA,MAAM,MAAd,kBACA,4BAAQA,MAAM,MAAd,gBACA,4BAAQA,MAAM,MAAd,aACA,4BAAQA,MAAM,MAAd,SACA,4BAAQA,MAAM,MAAd,QACA,4BAAQA,MAAM,MAAd,WACA,4BAAQA,MAAM,MAAd,YACA,4BAAQA,MAAM,MAAd,cACA,4BAAQA,MAAM,MAAd,iBACA,4BAAQA,MAAM,MAAd,aACA,4BAAQA,MAAM,MAAd,WACA,4BAAQA,MAAM,MAAd,8BACA,4BAAQA,MAAM,MAAd,4BACA,4BAAQA,MAAM,MAAd,4BACA,4BAAQA,MAAM,MAAd,4BACA,4BAAQA,MAAM,MAAd,iCACA,4BAAQA,MAAM,MAAd,gCAKZ,2BAAOf,UAAU,YAAYY,QAAQ,OAArC,OACA,2BAAOC,SAAU,SAAAC,GAAC,OAAIkB,EAAOlB,EAAEZ,OAAOa,QAC/BA,MAAOgB,EACP/B,UAAU,8BAA8BgB,GAAG,MAAMC,KAAK,MAAMC,KAAK,OACjEmB,QAAQ,yBAGf,4BAAQnB,KAAM,SAAUG,QAAS,kBAAMe,EAAchC,EAAMkC,QAA3D,QAGIH,GACA,4BAAQjB,KAAM,SAAUG,QAAS,kBAAMe,EAAchC,EAAMmC,QAA3D,UCjEDC,MA1Df,SAAsBpC,GAClB,IAAIqC,EAAYrC,EAAMqC,UADE,EAEFpC,mBAASoC,EAAUC,KAFjB,mBAEjBA,EAFiB,KAEZC,EAFY,OAGEtC,mBAASoC,EAAUG,OAHrB,mBAGjBA,EAHiB,KAGVC,EAHU,OAIAxC,mBAASoC,EAAUK,MAJnB,mBAIjBA,EAJiB,KAIXC,EAJW,KAMlBZ,EAAWO,GAAOE,GAASE,GAAQ,MAAQA,GAAQ,KAEzD,SAASE,EAAgB9C,GACrBE,EAAM4C,gBAAgB,CAClBN,IAAIA,EACJE,MAAMA,EACNE,KAAKA,GACN5C,GAGP,OACI,8BAAUF,UAAU,gBAChB,4BAAQA,UAAU,cAAlB,iBACA,0BAAMA,UAAU,WAAWgB,GAAG,WAA9B,2BACA,yBAAKhB,UAAU,sBACX,yBAAKA,UAAU,wCACX,2BAAOA,UAAU,YAAYY,QAAQ,mBAArC,SACA,2BACIC,SAAU,SAAAC,GAAC,OAAI+B,EAAS/B,EAAEZ,OAAOa,QACjCA,MAAO6B,EACP5C,UAAU,8BAA8BiD,mBAAiB,UAAUjC,GAAG,kBACtEC,KAAK,kBAAkBC,KAAK,YAEpC,yBAAKlB,UAAU,sCACX,2BAAOA,UAAU,YAAYY,QAAQ,mBAArC,OACA,2BACIC,SAAU,SAAAC,GAAC,OAAI6B,EAAO7B,EAAEZ,OAAOa,QAC/BA,MAAO2B,EACP1C,UAAU,8BAA8BiD,mBAAiB,UAAUjC,GAAG,kBACtEC,KAAK,kBAAkBC,KAAK,YAEpC,yBAAKlB,UAAU,uCACX,2BAAOA,UAAU,YAAYY,QAAQ,mBAArC,QACA,2BACIC,SAAU,SAAAC,GAAC,OAAIiC,EAAQjC,EAAEZ,OAAOa,QAChCA,MAAO+B,EACP9C,UAAU,8BAA8BiD,mBAAiB,UAAUjC,GAAG,kBACtEC,KAAK,kBAAkBC,KAAK,aAIxC,4BAAQA,KAAM,SAAUG,QAAS,kBAAM2B,EAAgB5C,EAAMkC,QAA7D,QAGIH,GACA,4BAAQjB,KAAM,SAAUG,QAAS,kBAAM2B,EAAgB5C,EAAMmC,QAA7D,UCyDDW,MA5Gf,SAA0B9C,GAAO,IAAD,EAEUC,mBAASD,EAAM+C,aAFzB,mBAErBA,EAFqB,KAERC,EAFQ,OAGF/C,mBAASD,EAAMiD,OAHb,mBAGrBA,EAHqB,KAGdC,EAHc,OAIMjD,mBAASD,EAAMmD,WAJrB,mBAIrBA,EAJqB,KAIVC,EAJU,OAKcnD,mBAASD,EAAMqD,eAL7B,mBAKrBA,EALqB,KAKNC,EALM,OAMMrD,mBAASD,EAAMuD,WANrB,mBAMrBA,EANqB,KAMVC,EANU,KAQtBC,EAAQ,CACV,IAAM,UACN,IAAM,eACN,IAAM,WACN,IAAM,aACN,IAAM,wBAIJ1B,EAAkC,KAAvBgB,EAAYW,QAAiBT,EAAMU,QAAQ,KAAO,GAAKV,EAAMU,QAAQ,KAAOV,EAAMU,QAAQ,KAC3G,SAASC,EAAc9D,GACnBE,EAAM4D,cAAc,CAChBb,YAAYA,EACZE,MAAMA,EACNE,UAAUA,EACVE,cAAcA,EACdE,UAAUA,GACXzD,GAGP,OADA+D,QAAQC,IAAIP,GAER,8BAAU3D,UAAU,gBAChB,4BAAQA,UAAU,cAAlB,uBAEA,2BAAOA,UAAU,YAAYY,QAAQ,gBAArC,gBACA,2BACIC,SAAU,SAAAC,GAAC,OAAIsC,EAAetC,EAAEZ,OAAOa,QACvCA,MAAOoC,EACPnD,UAAU,YACVgB,GAAG,eACHC,KAAK,eACLC,KAAK,OACLC,UAAQ,EAACC,gBAAc,SAE3B,2BAAOpB,UAAU,YAAYY,QAAQ,SAArC,iBACA,2BACIC,SAAU,SAAAC,GAAC,OAAIwC,EAASxC,EAAEZ,OAAOa,QACjCA,MAAOsC,EACPrD,UAAU,YAAYgB,GAAG,QAAQC,KAAK,QAAQC,KAAK,SAEvD,2BAAOlB,UAAU,YAAYY,QAAQ,iBAArC,2BACA,yBAAKZ,UAAU,aACX,2BAAOmE,QAA2B,UAAlBV,EACT5C,SAAU,kBAAM6C,EAAiB,UACjC1D,UAAU,mBAAmBgB,GAAG,eAAeE,KAAK,QAAQD,KAAK,gBACjEF,MAAO,UACd,2BAAOf,UAAU,mBAAmBY,QAAS,gBAA7C,+DAGJ,yBAAKZ,UAAU,aACX,2BAAOmE,QAA2B,UAAlBV,EACT5C,SAAU,kBAAM6C,EAAiB,UACjC1D,UAAU,mBAAmBgB,GAAG,eAAeE,KAAK,QAAQD,KAAK,gBACjEF,MAAO,UACd,2BAAOf,UAAU,mBAAmBY,QAAS,gBAA7C,UAIkB,UAAlB6C,GACI,kBAAC,IAAM1D,SAAP,KAGI,2BAAOC,UAAU,YAAYY,QAAQ,cAArC,4BAGIwD,OAAOC,KAAKR,GAAOS,KAAI,SAACC,GACxB,OACA,yBAAKvE,UAAU,YAAYwE,IAAKD,GAChC,2BAAOJ,QAASZ,IAAcgB,EAC9B1D,SAAU,kBAAM2C,EAAae,IAC7BvE,UAAU,mBAAmBgB,GAAIuD,EAAMrD,KAAK,QAAQD,KAAK,aACzDF,MAAOwD,IACP,2BAAOvE,UAAU,mBAAmBY,QAAS2D,GAAOV,EAAMU,QAM9D,yBAAKvE,UAAU,gBACX,2BACIa,SAAU,SAACC,GAAD,OAAO8C,EAAa9C,EAAEZ,OAAOiE,UACvCnE,UAAU,sBAAsBgB,GAAG,QAAQE,KAAK,WAChDD,KAAK,uBAAuBF,MAAM,YAAYoD,QAASR,IACvD,2BAAO3D,UAAU,sBAAsBY,QAAQ,SAA/C,qIAMpB,4BAAQM,KAAM,SAAUG,QAAS,kBAAM2C,EAAc5D,EAAMkC,QAA3D,QAGIH,GACA,4BAAQjB,KAAM,SAAUG,QAAS,kBAAM2C,EAAc5D,EAAMmC,QAA3D,UC9FDkC,MAPf,SAAyBrE,GAErB,OACI,wDCEasE,E,YACjB,WAAYtE,GAAQ,IAAD,8BACf,4CAAMA,KACDkB,WAAa,EAAKA,WAAWqD,KAAhB,gBAClB,EAAKvC,cAAgB,EAAKA,cAAcuC,KAAnB,gBACrB,EAAK3B,gBAAkB,EAAKA,gBAAgB2B,KAArB,gBACvB,EAAKX,cAAgB,EAAKA,cAAcW,KAAnB,gBACrB,EAAKC,MAAQ,CACTtE,UAAW,GACXE,WAAY,GACZE,SAAU,GACVc,QAAS,CACLC,SAAS,GACTE,SAAS,GACTE,KAAK,GACLE,IAAI,GACJE,QAAQ,IAEZQ,UAAU,CACNC,IAAI,GACJE,MAAM,GACNE,KAAK,IAETK,YAAY,GACZE,MAAM,GACNE,UAAU,MACVE,cAAc,QACdE,WAAU,EACVkB,cAAc,QA3BH,E,wEA+BRC,GACPb,QAAQC,IAAIY,GACZC,KAAKC,SAAS,CACV1E,UAAUwE,EAAQxE,UAClBE,WAAWsE,EAAQtE,WACnBE,SAASoE,EAAQpE,SACjBmE,cAAc,c,oCAIRrD,EAAStB,GACnB6E,KAAKC,SAAS,CACVxD,QAAQA,EACRqD,cAAc3E,M,sCAINuC,EAAWvC,GACvB6E,KAAKC,SAAS,CACVvC,UAAUA,EACVoC,cAAc3E,M,oCAIR4E,EAAS5E,GACnB6E,KAAKC,SAAS,CACV7B,YAAY2B,EAAQ3B,YACpBE,MAAMyB,EAAQzB,MACdE,UAAUuB,EAAQvB,UAClBE,cAAcqB,EAAQrB,cACtBE,UAAUmB,EAAQnB,UAClBkB,cAAc3E,M,+BAIlB,IAAII,EAAYyE,KAAKH,MAAMtE,UACvBE,EAAauE,KAAKH,MAAMpE,WACxBE,EAAWqE,KAAKH,MAAMlE,SAC1B,OACI,0BAAMV,UAAU,YAEkB,SAA7B+E,KAAKH,MAAMC,eACR,kBAAC,EAAD,CACIvE,UAAWA,EACXE,WAAYA,EACZE,SAAUA,EACVY,WAAYyD,KAAKzD,aAIK,YAA7ByD,KAAKH,MAAMC,eACR,kBAAC,EAAD,CACIrD,QAASuD,KAAKH,MAAMpD,QACpBY,cAAe2C,KAAK3C,cACpBE,KAAM,OACNC,KAAM,QAIgB,QAA7BwC,KAAKH,MAAMC,eACR,kBAAC,EAAD,CACIpC,UAAWsC,KAAKH,MAAMnC,UACtBO,gBAAiB+B,KAAK/B,gBACtBV,KAAM,UACNC,KAAM,YAIgB,YAA7BwC,KAAKH,MAAMC,eACR,kBAAC,EAAD,CACIpB,cAAesB,KAAKH,MAAMnB,cAC1BN,YAAa4B,KAAKH,MAAMzB,YACxBE,MAAO0B,KAAKH,MAAMvB,MAClBE,UAAWwB,KAAKH,MAAMrB,UACtBI,UAAWoB,KAAKH,MAAMjB,UACtBK,cAAee,KAAKf,cACpB1B,KAAM,MACNC,KAAM,WAImB,WAA7BwC,KAAKH,MAAMC,eACP,kBAAC,EAAD,W,GAlH4BI,IAAMC,WCU3CC,MATf,WACE,OACE,yBAAKnF,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,QCAcoF,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.97dfec32.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.9f5d0a16.svg\";","import React from \"react\";\n\nfunction Header(){\n\n    return(\n        <React.Fragment>\n            <div className=\"App-header\">\n                Library Card Application\n            </div>\n            <div>\n                To apply online, you must be at least 13 years old and have photo ID.\n                Children under age 13 may apply by downloading a child's card application.\n                Applications are also available at any <a href={\"https://www.spl.org/hours-and-locations\"} target={\"_blank\"}>Library location</a>.\n            </div>\n        </React.Fragment>\n    )\n    \n}\nexport default Header","import React, { useState } from \"react\";\n\nfunction NameComponent (props){\n\n    const [firstName, setFirstName] = useState(props.firstName);\n    const [middleName, setMiddleName] = useState(props.middleName);\n    const [lastName, setLastName] = useState(props.lastName);\n\n    function updateName() {\n        props.updateName({\n            firstName:firstName,\n            middleName:middleName,\n            lastName:lastName,\n        });\n    }\n\n    return (\n        <React.Fragment>\n            <fieldset className=\"usa-fieldset\">\n                <legend className=\"usa-legend\">Name</legend>\n\n                <label className=\"usa-label\" htmlFor=\"first-name\">First name</label>\n                <input onChange={e => setFirstName(e.target.value)}\n                       value={firstName}\n                       className=\"usa-input\"\n                       id=\"first-name\"\n                       name=\"first-name\"\n                       type=\"text\"\n                       required aria-required=\"true\"\n                      />\n\n                <label className=\"usa-label\" htmlFor=\"middle-name\">\n                    Middle name\n                    <span className=\"usa-hint\">(optional)</span>\n                </label>\n                <input onChange={e => setMiddleName(e.target.value)}\n                       value={middleName}\n                       className=\"usa-input\" id=\"middle-name\" name=\"middle-name\" type=\"text\"/>\n\n                <label className=\"usa-label\" htmlFor=\"last-name\">Last name</label>\n                <input onChange={e => setLastName(e.target.value)}\n                       value={lastName}\n                       className=\"usa-input\" id=\"last-name\" name=\"last-name\" type=\"text\" required\n                       aria-required=\"true\"/>\n            </fieldset>\n            {\n                firstName && lastName &&\n                <button type={\"button\"} onClick={() => updateName()}>Next\n                </button>\n            }\n        </React.Fragment>\n    )\n\n}\n\nexport default NameComponent;","import React, { useState } from \"react\";\n\nfunction AddressComponent(props){\n    let address = props.address;\n    const [address1, setAddress1] = useState(address.address1);\n    const [address2, setAddress2] = useState(address.address2);\n    const [city, setCity] = useState(address.city);\n    const [zip, setZip] = useState(address.zip);\n    const [usState, setUSState] = useState(address.usState);\n\n    const showNext = address1 && city && zip && usState;\n\n    function updateAddress(target){\n        props.updateAddress({\n            address1:address1,\n            address2:address2,\n            city:city,\n            zip:zip,\n            usState:usState\n        }, target)\n    }\n\n    return(\n        <fieldset className=\"usa-fieldset\">\n            <legend className=\"usa-legend\">Mailing address</legend>\n            <label className=\"usa-label\" htmlFor=\"mailing-address-1\">Street address 1</label>\n            <input\n                onChange={e => setAddress1(e.target.value)}\n                value={address1}\n                className=\"usa-input\" id=\"mailing-address-1\" name=\"mailing-address-1\" type=\"text\"/>\n\n            <label className=\"usa-label\" htmlFor=\"mailing-address-2\">Street address 2 <span\n                className=\"usa-hint\">(optional)</span></label>\n            <input\n                onChange={e => setAddress2(e.target.value)}\n                value={address2}\n                className=\"usa-input\" id=\"mailing-address-2\" name=\"mailing-address-2\" type=\"text\"/>\n\n            <div className=\"grid-row grid-gap\">\n                <div className=\"mobile-lg:grid-col-8\">\n                    <label className=\"usa-label\" htmlFor=\"city\">City</label>\n                    <input\n                        onChange={e => setCity(e.target.value)}\n                        value={city}\n                        className=\"usa-input\" id=\"city\" name=\"city\" type=\"text\"/>\n                </div>\n                <div className=\"mobile-lg:grid-col-4\">\n                    <label className=\"usa-label\" htmlFor=\"state\">State</label>\n                    <select\n                        onChange={e => setUSState(e.target.value)}\n                        value={usState}\n                        className=\"usa-select\" id=\"state\" name=\"state\">\n                        <option value>- Select -</option>\n                        <option value=\"AL\">Alabama</option>\n                        <option value=\"AK\">Alaska</option>\n                        <option value=\"AZ\">Arizona</option>\n                        <option value=\"AR\">Arkansas</option>\n                        <option value=\"CA\">California</option>\n                        <option value=\"CO\">Colorado</option>\n                        <option value=\"CT\">Connecticut</option>\n                        <option value=\"DE\">Delaware</option>\n                        <option value=\"DC\">District of Columbia</option>\n                        <option value=\"FL\">Florida</option>\n                        <option value=\"GA\">Georgia</option>\n                        <option value=\"HI\">Hawaii</option>\n                        <option value=\"ID\">Idaho</option>\n                        <option value=\"IL\">Illinois</option>\n                        <option value=\"IN\">Indiana</option>\n                        <option value=\"IA\">Iowa</option>\n                        <option value=\"KS\">Kansas</option>\n                        <option value=\"KY\">Kentucky</option>\n                        <option value=\"LA\">Louisiana</option>\n                        <option value=\"ME\">Maine</option>\n                        <option value=\"MD\">Maryland</option>\n                        <option value=\"MA\">Massachusetts</option>\n                        <option value=\"MI\">Michigan</option>\n                        <option value=\"MN\">Minnesota</option>\n                        <option value=\"MS\">Mississippi</option>\n                        <option value=\"MO\">Missouri</option>\n                        <option value=\"MT\">Montana</option>\n                        <option value=\"NE\">Nebraska</option>\n                        <option value=\"NV\">Nevada</option>\n                        <option value=\"NH\">New Hampshire</option>\n                        <option value=\"NJ\">New Jersey</option>\n                        <option value=\"NM\">New Mexico</option>\n                        <option value=\"NY\">New York</option>\n                        <option value=\"NC\">North Carolina</option>\n                        <option value=\"ND\">North Dakota</option>\n                        <option value=\"OH\">Ohio</option>\n                        <option value=\"OK\">Oklahoma</option>\n                        <option value=\"OR\">Oregon</option>\n                        <option value=\"PA\">Pennsylvania</option>\n                        <option value=\"RI\">Rhode Island</option>\n                        <option value=\"SC\">South Carolina</option>\n                        <option value=\"SD\">South Dakota</option>\n                        <option value=\"TN\">Tennessee</option>\n                        <option value=\"TX\">Texas</option>\n                        <option value=\"UT\">Utah</option>\n                        <option value=\"VT\">Vermont</option>\n                        <option value=\"VA\">Virginia</option>\n                        <option value=\"WA\">Washington</option>\n                        <option value=\"WV\">West Virginia</option>\n                        <option value=\"WI\">Wisconsin</option>\n                        <option value=\"WY\">Wyoming</option>\n                        <option value=\"AA\">AA - Armed Forces Americas</option>\n                        <option value=\"AE\">AE - Armed Forces Africa</option>\n                        <option value=\"AE\">AE - Armed Forces Canada</option>\n                        <option value=\"AE\">AE - Armed Forces Europe</option>\n                        <option value=\"AE\">AE - Armed Forces Middle East</option>\n                        <option value=\"AP\">AP - Armed Forces Pacific</option>\n                    </select>\n                </div>\n            </div>\n\n            <label className=\"usa-label\" htmlFor=\"zip\">ZIP</label>\n            <input onChange={e => setZip(e.target.value)}\n                   value={zip}\n                   className=\"usa-input usa-input--medium\" id=\"zip\" name=\"zip\" type=\"text\"\n                   pattern=\"[\\d]{5}(-[\\d]{4})?\"\n            />\n\n            <button type={\"button\"} onClick={() => updateAddress(props.back)}>Back\n            </button>\n            {\n                showNext &&\n                <button type={\"button\"} onClick={() => updateAddress(props.next)}>Next\n                </button>\n            }\n        </fieldset>\n    )\n}\n\nexport default AddressComponent","import React, { useState } from \"react\";\n\nfunction DOBComponent(props){\n    let birthDate = props.birthDate;\n    const [day, setDay] = useState(birthDate.day);\n    const [month, setMonth] = useState(birthDate.month);\n    const [year, setYear] = useState(birthDate.year);\n\n    const showNext = day && month && year <= 2013 && year >= 1900;\n\n    function updateBirthDate(target){\n        props.updateBirthDate({\n            day:day,\n            month:month,\n            year:year\n        }, target)\n    }\n\n    return(\n        <fieldset className=\"usa-fieldset\">\n            <legend className=\"usa-legend\">Date of birth</legend>\n            <span className=\"usa-hint\" id=\"dobHint\">For example: 04 28 1986</span>\n            <div className=\"usa-memorable-date\">\n                <div className=\"usa-form-group usa-form-group--month\">\n                    <label className=\"usa-label\" htmlFor=\"date_of_birth_1\">Month</label>\n                    <input\n                        onChange={e => setMonth(e.target.value)}\n                        value={month}\n                        className=\"usa-input usa-input--inline\" aria-describedby=\"dobHint\" id=\"date_of_birth_1\"\n                        name=\"date_of_birth_1\" type=\"number\" />\n                </div>\n                <div className=\"usa-form-group usa-form-group--day\">\n                    <label className=\"usa-label\" htmlFor=\"date_of_birth_2\">Day</label>\n                    <input\n                        onChange={e => setDay(e.target.value)}\n                        value={day}\n                        className=\"usa-input usa-input--inline\" aria-describedby=\"dobHint\" id=\"date_of_birth_2\"\n                        name=\"date_of_birth_2\" type=\"number\" />\n                </div>\n                <div className=\"usa-form-group usa-form-group--year\">\n                    <label className=\"usa-label\" htmlFor=\"date_of_birth_3\">Year</label>\n                    <input\n                        onChange={e => setYear(e.target.value)}\n                        value={year}\n                        className=\"usa-input usa-input--inline\" aria-describedby=\"dobHint\" id=\"date_of_birth_3\"\n                        name=\"date_of_birth_3\" type=\"number\" />\n                </div>\n            </div>\n\n            <button type={\"button\"} onClick={() => updateBirthDate(props.back)}>Back\n            </button>\n            {\n                showNext &&\n                <button type={\"button\"} onClick={() => updateBirthDate(props.next)}>Next\n                </button>\n            }\n        </fieldset>\n    )\n}\n\nexport default DOBComponent","import React, { useState } from \"react\";\n\nfunction ContactComponent(props){\n\n    const [phoneNumber, setPhoneNumber] = useState(props.phoneNumber);\n    const [email, setEmail] = useState(props.email);\n    const [emailLang, setEmailLang] = useState(props.emailLang);\n    const [contactMethod, setContactMethod] = useState(props.contactMethod);\n    const [subscribe, setSubscribe] = useState(props.subscribe);\n\n    const langs = {\n        \"ENG\":\"English\",\n        \"CHI\":\"中文\",\n        \"SOM\":\"Soomaali\",\n        \"SPA\":\"Español\",\n        \"VIE\":\"Tiếng Việt\"\n\n    };\n\n    const showNext = phoneNumber.length === 10 && email.indexOf(\"@\") > 1 && email.indexOf(\".\") > email.indexOf(\"@\");\n    function updateContact(target){\n        props.updateContact({\n            phoneNumber:phoneNumber,\n            email:email,\n            emailLang:emailLang,\n            contactMethod:contactMethod,\n            subscribe:subscribe\n        }, target)\n    }\n    console.log(subscribe);\n    return(\n        <fieldset className=\"usa-fieldset\">\n            <legend className=\"usa-legend\">Contact Information</legend>\n\n            <label className=\"usa-label\" htmlFor=\"phone-number\">Phone Number</label>\n            <input\n                onChange={e => setPhoneNumber(e.target.value)}\n                value={phoneNumber}\n                className=\"usa-input\"\n                id=\"phone-number\"\n                name=\"phone-number\"\n                type=\"text\"\n                required aria-required=\"true\"\n            />\n            <label className=\"usa-label\" htmlFor=\"email\">Email Address</label>\n            < input\n                onChange={e => setEmail(e.target.value)}\n                value={email}\n                className=\"usa-input\" id=\"email\" name=\"email\" type=\"text\"\n            />\n            <label className=\"usa-label\" htmlFor=\"contactMethod\">Prefered Contact Method</label>\n            <div className=\"usa-radio\" >\n                <input checked={contactMethod === \"phone\"}\n                       onChange={() => setContactMethod(\"phone\")}\n                       className=\"usa-radio__input\" id=\"phoneContact\" type=\"radio\" name=\"contactMethod\"\n                       value={\"phone\"}/>\n                <label className=\"usa-radio__label\" htmlFor={\"phoneContact\"}>Phone (Using TeleCirc, an automated voice response system)</label>\n            </div>\n\n            <div className=\"usa-radio\" >\n                <input checked={contactMethod === \"email\"}\n                       onChange={() => setContactMethod(\"email\")}\n                       className=\"usa-radio__input\" id=\"emailContact\" type=\"radio\" name=\"contactMethod\"\n                       value={\"email\"}/>\n                <label className=\"usa-radio__label\" htmlFor={\"emailContact\"}>Email</label>\n            </div>\n\n            {\n                contactMethod === \"email\" &&\n                    <React.Fragment>\n\n\n                        <label className=\"usa-label\" htmlFor=\"email-lang\">Preferred Email Language</label>\n\n                        {\n                            Object.keys(langs).map((lang) => {\n                            return (\n                            <div className=\"usa-radio\" key={lang} >\n                            <input checked={emailLang === lang}\n                            onChange={() => setEmailLang(lang)}\n                            className=\"usa-radio__input\" id={lang} type=\"radio\" name=\"email-lang\"\n                            value={lang}/>\n                            <label className=\"usa-radio__label\" htmlFor={lang}>{langs[lang]}</label>\n                            </div>\n                            )\n                        })\n                        }\n\n                        <div className=\"usa-checkbox\">\n                            <input\n                                onChange={(e) => setSubscribe(e.target.checked)}\n                                className=\"usa-checkbox__input\" id=\"truth\" type=\"checkbox\"\n                                name=\"historical-figures-1\" value=\"subscribe\" checked={subscribe}/>\n                                <label className=\"usa-checkbox__label\" htmlFor=\"truth\">I would like to receive periodic emails about Library news, special events and activities from the Library and the Foundation? </label>\n                        </div>\n                    </React.Fragment>\n\n            }\n\n            <button type={\"button\"} onClick={() => updateContact(props.back)}>Back\n            </button>\n            {\n                showNext &&\n                <button type={\"button\"} onClick={() => updateContact(props.next)}>Next\n                </button>\n            }\n        </fieldset>\n    )\n}\n\nexport default ContactComponent","import React, { useState } from \"react\";\n\nfunction FinishComponent(props){\n\n    return(\n        <div>CONGRATS, you Finished</div>\n    )\n}\n\nexport default FinishComponent","import React from \"react\";\nimport NameComponent from \"./FormFields/NameComponent\";\nimport AddressComponent from \"./FormFields/AddressComponent\";\nimport DOBComponent from \"./FormFields/DOBComponent\";\nimport ContactComponent from \"./FormFields/ContactComponent\";\nimport FinishComponent from \"./FormFields/FinishComponent\";\n\nexport default class LibraryCardApplication extends React.Component{\n    constructor(props) {\n        super(props);\n        this.updateName = this.updateName.bind(this);\n        this.updateAddress = this.updateAddress.bind(this);\n        this.updateBirthDate = this.updateBirthDate.bind(this);\n        this.updateContact = this.updateContact.bind(this);\n        this.state = {\n            firstName: '',\n            middleName: '',\n            lastName: '',\n            address: {\n                address1:\"\",\n                address2:\"\",\n                city:\"\",\n                zip:\"\",\n                usState:\"\",\n            },\n            birthDate:{\n                day:\"\",\n                month:\"\",\n                year:\"\"\n            },\n            phoneNumber:\"\",\n            email:\"\",\n            emailLang:\"ENG\",\n            contactMethod:\"phone\",\n            subscribe:true,\n            currentTarget:\"name\"\n        }\n    }\n\n    updateName(payload){\n        console.log(payload);\n        this.setState({\n            firstName:payload.firstName,\n            middleName:payload.middleName,\n            lastName:payload.lastName,\n            currentTarget:\"address\"\n        })\n    }\n\n    updateAddress(address, target){\n        this.setState({\n            address:address,\n            currentTarget:target\n        })\n    }\n\n    updateBirthDate(birthDate, target){\n        this.setState({\n            birthDate:birthDate,\n            currentTarget:target\n        })\n    }\n\n    updateContact(payload, target){\n        this.setState({\n            phoneNumber:payload.phoneNumber,\n            email:payload.email,\n            emailLang:payload.emailLang,\n            contactMethod:payload.contactMethod,\n            subscribe:payload.subscribe,\n            currentTarget:target,\n        })\n    }\n    render(){\n        let firstName = this.state.firstName;\n        let middleName = this.state.middleName;\n        let lastName = this.state.lastName;\n        return (\n            <form className=\"usa-form\">\n\n                {this.state.currentTarget === \"name\" &&\n                    <NameComponent\n                        firstName={firstName}\n                        middleName={middleName}\n                        lastName={lastName}\n                        updateName={this.updateName}\n                    />\n                }\n\n                {this.state.currentTarget === \"address\" &&\n                    <AddressComponent\n                        address={this.state.address}\n                        updateAddress={this.updateAddress}\n                        back={\"name\"}\n                        next={\"dob\"}\n                    />\n                }\n\n                {this.state.currentTarget === \"dob\" &&\n                    <DOBComponent\n                        birthDate={this.state.birthDate}\n                        updateBirthDate={this.updateBirthDate}\n                        back={\"address\"}\n                        next={\"contact\"}\n                    />\n                }\n\n                {this.state.currentTarget === \"contact\" &&\n                    <ContactComponent\n                        contactMethod={this.state.contactMethod}\n                        phoneNumber={this.state.phoneNumber}\n                        email={this.state.email}\n                        emailLang={this.state.emailLang}\n                        subscribe={this.state.subscribe}\n                        updateContact={this.updateContact}\n                        back={\"dob\"}\n                        next={\"finish\"}\n                    />\n                }\n                {\n                    this.state.currentTarget === \"finish\" &&\n                        <FinishComponent />\n                }\n            </form>\n        )\n    }\n}","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport 'uswds/dist/js/uswds.min'\nimport 'uswds/dist/css/uswds.min.css'\nimport Header from \"./components/Header\";\nimport LibraryCardApplication from \"./components/LibraryCardApplication\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header/>\n      <LibraryCardApplication/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}